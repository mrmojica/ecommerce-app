{"ast":null,"code":"var _jsxFileName = \"/Users/michaelmojica/Desktop/WebDev2020/ecommerce/src/pages/SignInAndSignUp/SignIn/SignIn.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport CustomButton from \"../../../components/CustomButton/CustomButton\";\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from \"./SignInStyles\";\nimport { googleSignInStart, emailSignInStart } from \"../../../redux/user/userActions\"; // TODO: Fix tags and add input error feedback.\n\nconst SignIn = ({\n  googleSignInStart,\n  emailSignInStart\n}) => {\n  const [useCredentials, setCredentials] = useState({\n    email: \"\",\n    setCredentials: \"\"\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      emailSignInStart\n    } = this.props;\n    const {\n      email,\n      password\n    } = this.state;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...useCredentials,\n      [name]: value\n    });\n  };\n\n  return React.createElement(SignInContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(SignInTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Sign in with your email and password \"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"text\",\n    value: useCredentials.email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: useCredentials.password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(ButtonsBarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"SIGN IN\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"SIGN IN WITH GOOGLE\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/michaelmojica/Desktop/WebDev2020/ecommerce/src/pages/SignInAndSignUp/SignIn/SignIn.js"],"names":["React","useState","connect","FormInput","CustomButton","SignInContainer","SignInTitle","ButtonsBarContainer","googleSignInStart","emailSignInStart","SignIn","useCredentials","setCredentials","email","handleSubmit","event","preventDefault","props","password","state","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport FormInput from \"../../../components/FormInput/FormInput\";\nimport CustomButton from \"../../../components/CustomButton/CustomButton\";\nimport {\n  SignInContainer,\n  SignInTitle,\n  ButtonsBarContainer\n} from \"./SignInStyles\";\nimport {\n  googleSignInStart,\n  emailSignInStart\n} from \"../../../redux/user/userActions\";\n\n// TODO: Fix tags and add input error feedback.\nconst SignIn = ({ googleSignInStart, emailSignInStart }) => {\n  const [useCredentials, setCredentials] = useState({\n    email: \"\",\n    setCredentials: \"\"\n  });\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const { emailSignInStart } = this.props;\n    const { email, password } = this.state;\n\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n\n    setCredentials({ ...useCredentials, [name]: value });\n  };\n\n  return (\n    <SignInContainer>\n      <SignInTitle>I already have an account</SignInTitle>\n      <span>Sign in with your email and password </span>\n\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          name=\"email\"\n          type=\"text\"\n          value={useCredentials.email}\n          handleChange={handleChange}\n          label=\"Email\"\n          required\n        />\n        <FormInput\n          name=\"password\"\n          type=\"password\"\n          value={useCredentials.password}\n          handleChange={handleChange}\n          label=\"Password\"\n          required\n        />\n        <ButtonsBarContainer>\n          <CustomButton type=\"submit\">SIGN IN</CustomButton>\n          {/* Set type to 'button' to overide submit type */}\n          <CustomButton\n            type=\"button\"\n            onClick={googleSignInStart}\n            isGoogleSignIn\n          >\n            SIGN IN WITH GOOGLE\n          </CustomButton>\n        </ButtonsBarContainer>\n      </form>\n    </SignInContainer>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) =>\n    dispatch(emailSignInStart({ email, password }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}