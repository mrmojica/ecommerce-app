{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n}; // firebase.User reference\n// https://firebase.google.com/docs/reference/js/firebase.User\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  } // Use firebase query reference to get snapShot data\n  // to see if user exist. Create user if.\n  // https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exist) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Create new user.\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; // Add data to Firebase\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // get a new document ref and generate a new id\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google authentication utility\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // Always trigger google popup whenever we use GoogleAuthProvider - Authentication/ Signin\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/michaelmojica/Desktop/WebDev2020/ecommerce/src/Firebase/utils.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exist","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADC;AAErBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFH;AAGrBC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHJ;AAIrBC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJF;AAKrBC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALN;AAMrBC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW,6BANV;AAOrBC,EAAAA,KAAK,EAAEb,OAAO,CAACC,GAAR,CAAYa,gBAPE;AAQrBC,EAAAA,aAAa,EAAEf,OAAO,CAACC,GAAR,CAAYe;AARN,CAAvB,C,CAWA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AACb;AACD,GAH0E,CAK3E;AACA;AACA;;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,KAAd,EAAqB;AACnB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAAEJ,QAAAA,WAAF;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA,SAAtB;AAAiC,WAAGV;AAApC,OAAZ,CAAN;AACD,KAHD,CAGE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAxBM,C,CA0BP;;AACA,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAsBC,GAAD,IAAS;AAC5B;AACA,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACD,GAJD;AAKD,CATM;AAWP9C,QAAQ,CAACgD,aAAT,CAAuB/C,cAAvB;AAEA,OAAO,MAAMgD,IAAI,GAAGjD,QAAQ,CAACiD,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGxB,QAAQ,CAACwB,SAAT,EAAlB,C,CAEP;;AACA,MAAM0B,QAAQ,GAAG,IAAIlD,QAAQ,CAACiD,IAAT,CAAcE,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAelD,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\n// firebase.User reference\n// https://firebase.google.com/docs/reference/js/firebase.User\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  // Use firebase query reference to get snapShot data\n  // to see if user exist. Create user if.\n  // https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exist) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Create new user.\n      await userRef.set({ displayName, email, createdAt, ...additionalData });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n// Add data to Firebase\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    // get a new document ref and generate a new id\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Google authentication utility\nconst provider = new firebase.auth.GoogleAuthProvider();\n// Always trigger google popup whenever we use GoogleAuthProvider - Authentication/ Signin\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}